import numpy as np
import talib
import pandas as pd
import datetime

# stock pool
stock_code = ['600519']
# trade delay, train start year, train end year, test start year
delay, y1, y2, y3 = 0, 15, 0, 15
# compute result
res = []

def trade(ds, p1, p2, delay, y1, y2, code):
    ma1 = talib.EMA(ds,p1)
    ma2 = talib.EMA(ds,p2)
    # initial cash
    profit = 1
    # hold duration
    day = 0
    # if hold (defualt false)
    hold = False
    # peak
    high = 0
    
    for i in range(len(ds)-int(y1*240), len(ds)-delay-int(y2*240)):
        if ds[i] > high:
            high = ds[i]
        if not hold:
            # dual MA start to raise
            if ma1[i] > ma1[i-1] and ma2[i] > ma2[i-1]:
                # trading fee
                buy = ds[i+delay] * 1.0003
                #print ('buy' + str(buy))
                hold = True
                high = ds[i]
        else:
            # hold one more day
            day += 1
            # (dual MA start to descend) or meet forced sell consition(now excluded)
            if (ma1[i] < ma1[i-1] and ma2[i] < ma2[i-1]) or ds[i] < 0 * buy:
                sell = ds[i+delay]
                #profit += (sell / buy * 0.9985 - 1) * 1
                profit *= sell / buy * 0.9987
                #print ('sell' + str(sell))
                hold = False
                high = 0
    # still hold, sell to cal profit
    if hold:
        sell = ds[-1]
        #profit += (sell / buy * 0.9985 - 1) * 1
        profit *= sell / buy
    # cal profit rate
    if day != 0:
        rate = (profit - 1) * 240 / day * 100
    else:
        rate = 0
        
    return [code, p1, p2, profit, rate]

def pick_high_p_belt(code, p2p):
    # max profit start index
    p = 3
    # profit belt to reduce risk and occasionality
    profit = p2p[0][3] + p2p[1][3] +p2p[2][3] + p2p[3][3] + p2p[4][3]
    # moving profit belt
    m_profit = profit
    # profit for return
    r_profit = 0
    p1_ = 1
    p2_ = 1
    # p2p[stockcode, p1, p2, profit, rate]
    for i in range(p, len(p2p)-2):
        m_profit = m_profit - p2p[i-3][3] + p2p[i+2][3]
        if m_profit > profit:
            profit = m_profit
            r_profit = p2p[i][3]
            p1_ = p2p[i][1]
            p2_ = p2p[i][2]
    return p1_, p2_, r_profit

def pick_high_p(code, p2p):
    max_p = 0
    p1_ = 1
    p2_ = 1
    for i in range(len(p2p)):
        if max_p < p2p[i][3]:
            max_p = p2p[i][3]
            p1_ = p2p[i][1]
            p2_ = p2p[i][2]
    return p1_, p2_, max_p

for code in stock_code:
    # get whole history close price | structure[stock code, date, close, open, vol]  
    ds = DataAPI.MktEqudGet(tradeDate=u"",secID=u"",ticker=code,beginDate=u"19900101",endDate=u"21001231",isOpen=u"",field=['ticker','tradeDate','closePrice','openPrice','turnoverVol'],pandas="1")
    ds = np.array(ds)[:,(2)].tolist()
    ds = np.array(ds, dtype=float).reshape((-1))
    
    # deal with index out of range
    if y1*240 >= len(ds):
        #continue
        y1 = len(ds) / 240 - 1
    # deal with index out of range
    if y3*240 >= len(ds):
        #continue
        y3 = len(ds) / 240 - 1
        
    # exclude new stocks
    if len(ds) < 100:
        continue
    # period 1, period 2 
    p1 = 0
    p2 = 0
    # p2p[stockcode, p1, p2, profit, rate]
    p2p = []
    # find a pair of p1,p2 to max the profit
    for i in range (2,100):
        print str(i) + '%', '   @' + str(datetime.datetime.now()).split('.')[0] 
        for j in range (i,200,2):
            p2p.append(trade(ds, i, j, delay, y1, y2, code))
            #print (p2p[-1])
    print
    
    p1, p2, profit = pick_high_p_belt(code, p2p)
    
    if profit > 0:
        # do test
        res.append(trade(ds,p1,p2,delay,y3,0,code))
        # show train result
        print 'start: ' + str(ds[len(ds)-int(y1*240)]) + ', end: ' + str(ds[-1]) + ', years: ' + str(y1)
        print (code + ' p1:' +str(p1) + ' p2:' + str(p2) + ' profit:'+ str(float(int(profit*100))/100) + ' done! @' + str(datetime.datetime.now()).split('.')[0])
        # show test result (precise to 0.01)
        print (float(int(res[-1][3]*100))/100)

# save to local file
res = pd.DataFrame(data = res)
res.to_csv('macd2.csv', encoding = 'gbk')
print ('all done!')
